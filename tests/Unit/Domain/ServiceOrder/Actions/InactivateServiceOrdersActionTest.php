<?php

declare(strict_types=1);

use Domain\Customer\Database\Factories\CustomerFactory;
use Domain\ServiceOrder\Actions\InactivateServiceOrdersAction;
use Domain\ServiceOrder\Actions\InactivateServiceOrderStatusAction;
use Domain\ServiceOrder\Actions\SendToCustomerServiceOrderStatusEmailAction;
use Domain\ServiceOrder\Database\Factories\ServiceBillFactory;
use Domain\ServiceOrder\Database\Factories\ServiceOrderFactory;
use Illuminate\Support\Facades\Queue;
use Spatie\QueueableAction\Testing\QueueableActionFake;

beforeEach(function () {
    testInTenantContext();

    now()->setTestNow('2023-11-05');

    $this->initialServiceBill = ServiceBillFactory::new()
        ->billingDate(null)
        ->dueDate(null)
        ->paid();

    Queue::fake();
});

it('can dispatch with an overdue unpaid bill', function () {
    CustomerFactory::new()
        ->active()
        ->has(
            ServiceOrderFactory::new()
                ->active()
                ->subscriptionBased()
                ->nonAutoGeneratedBills()
                ->has($this->initialServiceBill)
                ->has(
                    ServiceBillFactory::new()
                        ->billingDate(now()->parse('2023-11-01'))
                        ->dueDate(now()->parse('2023-11-04'))
                        ->pending()
                )
        )
        ->createOne();

    app(InactivateServiceOrdersAction::class)->execute();

    QueueableActionFake::assertPushedWithChain(
        InactivateServiceOrderStatusAction::class,
        [SendToCustomerServiceOrderStatusEmailAction::class]
    );
});

it('cannot dispatch with an inactive customer', function () {
    CustomerFactory::new()
        ->inactive()
        ->has(
            ServiceOrderFactory::new()
                ->active()
                ->subscriptionBased()
                ->nonAutoGeneratedBills()
                ->has($this->initialServiceBill)
                ->has(
                    ServiceBillFactory::new()
                        ->billingDate(now()->parse('2023-11-01'))
                        ->dueDate(now()->parse('2023-11-04'))
                        ->pending()
                )
        )
        ->createOne();

    app(InactivateServiceOrdersAction::class)->execute();

    QueueableActionFake::assertNotPushed(InactivateServiceOrderStatusAction::class);
});

it('cannot dispatch without service order', function () {
    CustomerFactory::new()
        ->active()
        ->createOne();

    app(InactivateServiceOrdersAction::class)->execute();

    QueueableActionFake::assertNotPushed(InactivateServiceOrderStatusAction::class);
});

it('cannot dispatch with an inactive service order', function () {
    CustomerFactory::new()
        ->inactive()
        ->has(
            ServiceOrderFactory::new()
                ->inactive()
                ->subscriptionBased()
                ->nonAutoGeneratedBills()
                ->has($this->initialServiceBill)
                ->has(
                    ServiceBillFactory::new()
                        ->billingDate(now()->parse('2023-11-01'))
                        ->dueDate(now()->parse('2023-11-04'))
                        ->pending()
                )
        )
        ->createOne();

    app(InactivateServiceOrdersAction::class)->execute();

    QueueableActionFake::assertNotPushed(InactivateServiceOrderStatusAction::class);
});

it('cannot dispatch with a non-subscription service order', function () {
    CustomerFactory::new()
        ->inactive()
        ->has(
            ServiceOrderFactory::new()
                ->active()
                ->nonSubscriptionBased()
                ->nonAutoGeneratedBills()
                ->has($this->initialServiceBill)
                ->has(
                    ServiceBillFactory::new()
                        ->billingDate(now()->parse('2023-11-01'))
                        ->dueDate(now()->parse('2023-11-04'))
                        ->pending()
                )
        )
        ->createOne();

    app(InactivateServiceOrdersAction::class)->execute();

    QueueableActionFake::assertNotPushed(InactivateServiceOrderStatusAction::class);
});

it('cannot dispatch with an auto generated bill service order', function () {
    CustomerFactory::new()
        ->inactive()
        ->has(
            ServiceOrderFactory::new()
                ->active()
                ->subscriptionBased()
                ->autoGeneratedBills()
                ->has($this->initialServiceBill)
                ->has(
                    ServiceBillFactory::new()
                        ->billingDate(now()->parse('2023-11-01'))
                        ->dueDate(now()->parse('2023-11-04'))
                        ->pending()
                )
        )
        ->createOne();

    app(InactivateServiceOrdersAction::class)->execute();

    QueueableActionFake::assertNotPushed(InactivateServiceOrderStatusAction::class);
});

it('cannot dispatch without service bill', function () {
    CustomerFactory::new()
        ->inactive()
        ->has(
            ServiceOrderFactory::new()
                ->active()
                ->subscriptionBased()
                ->nonAutoGeneratedBills()
        )
        ->createOne();

    app(InactivateServiceOrdersAction::class)->execute();

    QueueableActionFake::assertNotPushed(InactivateServiceOrderStatusAction::class);
});

it('cannot dispatch with a paid latest service bill', function () {
    CustomerFactory::new()
        ->inactive()
        ->has(
            ServiceOrderFactory::new()
                ->active()
                ->subscriptionBased()
                ->autoGeneratedBills()
                ->has($this->initialServiceBill)
                ->has(
                    ServiceBillFactory::new()
                        ->billingDate(now()->parse('2023-11-01'))
                        ->dueDate(now()->parse('2023-11-04'))
                        ->paid()
                )
        )
        ->createOne();

    app(InactivateServiceOrdersAction::class)->execute();

    QueueableActionFake::assertNotPushed(InactivateServiceOrderStatusAction::class);
});

it('cannot dispatch without a billing date', function () {
    CustomerFactory::new()
        ->inactive()
        ->has(
            ServiceOrderFactory::new()
                ->active()
                ->subscriptionBased()
                ->autoGeneratedBills()
                ->has($this->initialServiceBill)
                ->has(
                    ServiceBillFactory::new()
                        ->billingDate(null)
                        ->dueDate(now()->parse('2023-11-04'))
                        ->pending()
                )
        )
        ->createOne();

    app(InactivateServiceOrdersAction::class)->execute();

    QueueableActionFake::assertNotPushed(InactivateServiceOrderStatusAction::class);
});

it('cannot dispatch without a due date', function () {
    CustomerFactory::new()
        ->inactive()
        ->has(
            ServiceOrderFactory::new()
                ->active()
                ->subscriptionBased()
                ->autoGeneratedBills()
                ->has($this->initialServiceBill)
                ->has(
                    ServiceBillFactory::new()
                        ->billingDate(now()->parse('2023-11-03'))
                        ->dueDate(null)
                        ->pending()
                )
        )
        ->createOne();

    app(InactivateServiceOrdersAction::class)->execute();

    QueueableActionFake::assertNotPushed(InactivateServiceOrderStatusAction::class);
});

it('cannot dispatch on due date', function () {
    CustomerFactory::new()
        ->inactive()
        ->has(
            ServiceOrderFactory::new()
                ->active()
                ->subscriptionBased()
                ->autoGeneratedBills()
                ->has($this->initialServiceBill)
                ->has(
                    ServiceBillFactory::new()
                        ->billingDate(now()->parse('2023-11-03'))
                        ->dueDate(now()->parse('2023-11-05'))
                        ->pending()
                )
        )
        ->createOne();

    app(InactivateServiceOrdersAction::class)->execute();

    QueueableActionFake::assertNotPushed(InactivateServiceOrderStatusAction::class);
});

it('cannot dispatch on past due date (more than a day)', function () {
    now()->setTestNow('2023-11-06');

    CustomerFactory::new()
        ->inactive()
        ->has(
            ServiceOrderFactory::new()
                ->active()
                ->subscriptionBased()
                ->autoGeneratedBills()
                ->has($this->initialServiceBill)
                ->has(
                    ServiceBillFactory::new()
                        ->billingDate(now()->parse('2023-11-05'))
                        ->dueDate(now()->parse('2023-11-04'))
                        ->pending()
                )
        )
        ->createOne();

    app(InactivateServiceOrdersAction::class)->execute();

    QueueableActionFake::assertNotPushed(InactivateServiceOrderStatusAction::class);
});
