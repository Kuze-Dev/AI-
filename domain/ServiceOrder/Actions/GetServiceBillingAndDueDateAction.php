<?php

declare(strict_types=1);

namespace Domain\ServiceOrder\Actions;

use Domain\ServiceOrder\DataTransferObjects\GetServiceBillingAndDueData;
use Domain\ServiceOrder\DataTransferObjects\ServiceOrderBillingAndDueDateData;
use Domain\ServiceOrder\Enums\ServiceOrderStatus;
use Domain\ServiceOrder\Exceptions\AutoGeneratedBillNotAllowedException;
use Domain\ServiceOrder\Exceptions\InvalidReferenceDateException;
use Domain\ServiceOrder\Exceptions\NonSubscriptionNotAllowedException;
use Domain\ServiceOrder\Exceptions\ServiceBillStatusMusBePaidException;
use Domain\ServiceOrder\Exceptions\ServiceOrderStatusClosedNotAllowedException;
use Domain\ServiceOrder\Exceptions\ServiceTransactionStatusMusBePaidException;
use Throwable;

class GetServiceBillingAndDueDateAction
{
    public function __construct(
        private readonly ComputeServiceBillingCycleAction $computeServiceBillingCycleAction
    ) {}

    /** @throws Throwable */
    public function execute(
        GetServiceBillingAndDueData $getServiceBillingAndDueData
    ): ServiceOrderBillingAndDueDateData {

        $serviceOrder = $getServiceBillingAndDueData->service_order;
        $serviceBill = $getServiceBillingAndDueData->service_bill;
        $serviceTransaction = $getServiceBillingAndDueData->service_transaction;

        if ($serviceOrder->status == ServiceOrderStatus::CLOSED) {
            throw new ServiceOrderStatusClosedNotAllowedException();
        }

        if (! $serviceOrder->is_subscription) {
            throw new NonSubscriptionNotAllowedException();
        }

        if ($serviceOrder->is_auto_generated_bill) {
            throw new AutoGeneratedBillNotAllowedException();
        }

        if (! $serviceBill->is_paid) {
            throw new ServiceBillStatusMusBePaidException();
        }

        if (! $serviceTransaction->is_paid) {
            throw new ServiceTransactionStatusMusBePaidException();
        }

        $referenceDate = $serviceBill->bill_date;

        if ($serviceBill->is_initial) {
            /** @var \Illuminate\Support\Carbon $transactionDate */
            $transactionDate = $serviceTransaction->created_at;

            $initialBillingCycle = $this->computeServiceBillingCycleAction
                ->execute($serviceOrder, $transactionDate);

            $referenceDate = $initialBillingCycle->bill_date;
        }

        $isOverDue = ! $serviceBill->is_initial &&
            now()->parse($serviceBill->due_date)
                ->toDateString() < now()->toDateString();

        if ($isOverDue) {
            $referenceDate = $serviceTransaction->created_at;
        }

        if (is_null($referenceDate)) {
            throw new InvalidReferenceDateException();
        }

        return $this->computeServiceBillingCycleAction
            ->execute($serviceOrder, now()->parse($referenceDate));
    }
}
